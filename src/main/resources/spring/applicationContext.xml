<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://mybatis.org/schema/mybatis-spring
       http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
   <!--
    Spring的配置
        1. 自动扫描：根据注解创建实例化，控制反转。
        2. 引入配置文件。jdbc的驱动包等信息。
        3. 配置数据源。需要的信息根据第二步中的jdbc中的配置文件来引用。
        4. 配置Mybaits的SqlSessionFactory:有了它可以MyBaits
        （1：数据源：第三步配置数据源。2：自动扫描mappers.xml文件。所有的映射文件。放在一个对应的路径下。3：加载Mybaits的配置文件

        5. DAO层接口包。该包下的所有都会被实例化。
        6. -配置事务管理：交由Spring来管理（定义事物传播属性）
        7. 配置事物切面。
        8. 异常处理相关。
         -->

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.heshan.redis" />
    <context:component-scan base-package="com.heshan.dao" />
    <context:component-scan base-package="com.heshan.service" />

    <!-- 加载配数据源配置文件 db.properties -->
    <context:property-placeholder location="classpath:**/db.properties"/>

    <!-- 配置数据源, 只要有连接就新建一个Connection  没有数据库连接池的作用 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置数据源 -->
 <!--   <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          p:driverClass="${jdbc.driverClassName}"
          p:jdbcUrl="${jdbc.url}"
          p:user="${jdbc.username}"
          p:password="${jdbc.password}"
          p:initialPoolSize="${jdbc.initialSize}"
          p:maxPoolSize="${jdbc.maxActive}"></bean>
-->

    <!-- Mybatis-spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类， Mybatis 的配置信息-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 扫描 po 包，使用别名 -->
        <property name="typeAliasesPackage" value="com.heshan.bean" />
        <!-- 扫描映射文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 Mapper层 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.heshan.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务管理器 （JDBC）  (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 启动声明式事务驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 配置事务通知属性 -->
<!--
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        &lt;!&ndash; 定义事务传播属性 &ndash;&gt;
        &lt;!&ndash; PROPAGATION_REQUIRED  -支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
         PROPAGATION_SUPPORTS   -支持当前事务，如果当前没有事务，就以非事务方式执行。&ndash;&gt;
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
-->
    <!-- 配置事务切面 -->
 <!--
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.heshan.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>
-->

    <!--    包扫描-->

	<context:component-scan base-package="com.heshan">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component"/>
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service"/>
	</context:component-scan>
    <!--    可以用这个方式来包扫描mapper-->
    <!--<mybatis:scan base-package="com.heshan.service" />-->

    <!-- 配置扫描 dao 包，动态实现 dao 接口，注入到 spring 容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.heshan.dao" />
        <!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 -->

        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <context:component-scan base-package="com.heshan.service"/>
    <context:component-scan base-package="com.heshan.service.impl"/>

   <!-- <context:component-scan base-package="cn.appsys.dao"/>-->
    <bean id="gson" class="com.google.gson.Gson" scope="prototype" />

    <!-- 异常统一处理 -->
     <bean id="exceptionResolver" class="com.heshan.exception.HandlerException"/>
</beans>